# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CatastoIT_GML_Merger_Pro
                                 A QGIS plugin CatastoIT_GML_Merger_Pro
                                 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Salvatore Fiandaca
        email                : pigrecoinfinito@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# -- Import moduli standard Python --
import os
import gc
import time
import shutil
# Altri import...
import io
import os.path
import tempfile
import urllib.request
from datetime import datetime, timedelta
from zipfile import ZipFile

# -- Import moduli di terze parti --
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator, QVariant, Qt, pyqtSignal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QListWidget
from qgis.core import Qgis, QgsField, QgsMessageLog, QgsProject, QgsVectorLayer, QgsTask, QgsApplication
import processing

# -- Import moduli locali del progetto --
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .catasto_gml_merger_dialog import catasto_gml_mergerDialog
from .core.task import GmlProcessingTask

directory_temporanea = ""                


class catasto_gml_merger:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'catasto_gml_merger_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Catasto_gml_merger')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('catasto_gml_merger', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/catasto_gml_merger/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'catasto_gml_merger'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Catasto_gml_merger'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        if self.first_start == True:
            self.first_start = False
            self.dlg = catasto_gml_mergerDialog()
            
            # Inizializziamo l'attributo per tenere traccia del task attivo
            self.current_task = None
            self.processing_active = False
            
            # Inizializza il widget di proiezione con il CRS predefinito
            from qgis.core import QgsCoordinateReferenceSystem
            self.dlg.mQgsProjectionSelectionWidget.setCrs(QgsCoordinateReferenceSystem('EPSG:6706'))
            
        self.dlg.show()
            
        def log_message(msg):
            print(msg)
            QgsMessageLog.logMessage(msg, 'Elaborazione GML')
            self.dlg.text_log.append(msg)
            self.dlg.text_log.repaint()
            
        def collect_inputs():
            inputs = {}
            
            file_type = self.dlg.cb_file_type.currentText()
            inputs['file_type'] = file_type
            print(inputs['file_type'])
            
            inputs['main_folder'] = self.dlg.le_folder.filePath()
            print(inputs['main_folder'])
            
            # Verifica che sia stata selezionata una cartella di lavoro
            if not inputs['main_folder']:
                log_message("<span style='color:red;font-weight:bold;'>ERRORE: Nessuna cartella di lavoro selezionata</span>")
                return None
            
            # Ottieni il CRS selezionato dal widget di proiezione
            crs = self.dlg.mQgsProjectionSelectionWidget.crs()
            inputs['target_crs'] = crs.authid() if crs.isValid() else 'EPSG:6706'  # Default a EPSG:6706 se non valido
            print(f"CRS selezionato: {inputs['target_crs']}")
            
            # Verifica lo stato del checkbox per sezione censuaria
            inputs['add_sezione_censuaria'] = self.dlg.cb_sez_censu.isChecked()
            if inputs['add_sezione_censuaria']:
                log_message("Opzione 'Aggiungi Sezione Censuaria nelle Particelle' attivata")
                print("Sezione censuaria attivata")
            
            inputs['url'] = self.dlg.le_url.text()
            if not inputs['url']:
                log_message("<span style='color:red;font-weight:bold;'>ERRORE: URL non specificato</span>")
                return None
            print(inputs['url'])
            
            # Ottieni le province selezionate dalla list_provinces
            selected_items = self.dlg.list_provinces.selectedItems()
            if not selected_items:
                log_message("<span style='color:red;font-weight:bold;'>ERRORE: Nessuna provincia selezionata</span>")
                return None
            
            # Crea una lista di codici provincia dalle selezioni
            province_codes = [item.text().strip().upper() for item in selected_items]
            inputs['province_code'] = ','.join(province_codes)
            inputs['filter_by_province'] = True
            
            log_message(f"Province selezionate: {inputs['province_code']}")
            print(f"Province selezionate: {inputs['province_code']}")
            
            formats = {
                'GPKG': '.gpkg'
            }

            format_name = self.dlg.cb_format.currentText()
            inputs['format_name'] = format_name
            inputs['output_extension'] = formats[format_name]
            print(inputs['output_extension'])
            
            if file_type in ['Mappe (MAP)', 'Entrambi']:
                # Ottieni solo il nome del file, non il percorso
                map_filename = self.dlg.le_map_output.text()
                if not map_filename:
                    log_message("<span style='color:red;font-weight:bold;'>ERRORE: Nome file di output MAP non specificato</span>")
                    return None
                
                # Aggiungi estensione se mancante
                if not map_filename.endswith(formats[format_name]):
                    map_filename += formats[format_name]
                
                # Componi il percorso completo usando la cartella principale
                map_output = os.path.join(inputs['main_folder'], map_filename)
                inputs['map_output'] = map_output
                print(inputs['map_output'])
            
            if file_type in ['Particelle (PLE)', 'Entrambi']:
                # Ottieni solo il nome del file, non il percorso
                ple_filename = self.dlg.le_ple_output.text()
                if not ple_filename:
                    log_message("<span style='color:red;font-weight:bold;'>ERRORE: Nome file di output PLE non specificato</span>")
                    return None
                
                # Aggiungi estensione se mancante
                if not ple_filename.endswith(formats[format_name]):
                    ple_filename += formats[format_name]
                
                # Componi il percorso completo usando la cartella principale
                ple_output = os.path.join(inputs['main_folder'], ple_filename)
                inputs['ple_output'] = ple_output
                print(inputs['ple_output'])

            inputs['load_layers'] = self.dlg.cb_load_layers.isChecked()
            print(inputs['load_layers'])
            
            self.dlg.text_log.clear()
            log_message("<span style='color:green;font-weight:bold;'>Parametri verificati correttamente</span>")
            
            return inputs

        def process_gml_files():
            global directory_temporanea
            
            try:
                # Inizializza lo stato di elaborazione
                self.processing_active = True
                
                # Abilita il pulsante di stop e disabilita quello di processo
                self.dlg.btn_stop.setEnabled(True)
                self.dlg.btn_process.setEnabled(False)
                
                inputs = collect_inputs()
                if not inputs:
                    log_message("Operazione annullata: verifica i parametri inseriti")
                    self.reset_processing_state()
                    return
                
                self.dlg.setWindowTitle("Catasto IT GML Merger PRO - Elaborazione in corso")
                
                # Logga i parametri di input per debug
                log_message("--- PARAMETRI DI ELABORAZIONE ---")
                for key, value in inputs.items():
                    log_message(f"{key}: {value}")
                log_message("-------------------------------")
                
                # Crea e configura il task con timeout più lungo
                task = GmlProcessingTask('Elaborazione GML', inputs)
                task.setExpiration(360000)  # Aumento a 360.000 millisecondi (6 minuti)
                
                # Connetti i segnali agli slot
                task.log_message.connect(log_message)
                task.task_completed.connect(self.on_task_completed)
                
                # Aggiungi il task al gestore task di QGIS
                QgsApplication.taskManager().addTask(task)
                self.current_task = task
                
                log_message("<span style='color:blue;'>Task avviato in background...</span>")
                log_message("<span style='color:blue;'>Puoi continuare a lavorare in QGIS, riduci a icona il Plugin!</span>")
                
            except Exception as e:
                log_message(f"<span style='color:red;font-weight:bold;'>Si è verificato un errore durante l'avvio del task: {str(e)}</span>")
                log_message(f"<span style='color:red;'>Dettagli errore:\n{traceback.format_exc()}</span>")
                self.reset_processing_state()

        def pulisci_temporanea():
            global directory_temporanea
            dir_path = directory_temporanea
            
            # Reset della progress bar
            # self.dlg.progressBar.setValue(0)
            # self.dlg.progressBar.setVisible(False)
            
            if dir_path and os.path.exists(dir_path):
                # Libera tutti i layer che potrebbero usare file nella directory temporanea
                for layer_id, layer in list(QgsProject.instance().mapLayers().items()):
                    if dir_path in layer.source():
                        QgsProject.instance().removeMapLayer(layer_id)
                
                # Forza garbage collection
                gc.collect()
                time.sleep(1)
                
                try:
                    for root, dirs, files in os.walk(dir_path, topdown=False):
                        for file in files:
                            try:
                                os.remove(os.path.join(root, file))
                            except:
                                log_message(f"Impossibile rimuovere {file}")
                    
                    shutil.rmtree(dir_path)
                    log_message(f"Directory {dir_path} rimossa correttamente")
                except OSError as e:
                    log_message(f"\nErrore nella pulizia: {str(e)}")
                    log_message("Alcuni file temporanei verranno rimossi alla chiusura del Plugin")
            else:
                log_message("Nessuna directory temporanea da pulire")

            # Resetta l'interfaccia
            self.dlg.le_folder.setFilePath("")
            self.dlg.le_map_output.setText("")  # Usa setText invece di setFilePath
            self.dlg.le_ple_output.setText("")  # Usa setText invece di setFilePath
            self.dlg.cb_file_type.setCurrentIndex(0)
            self.dlg.cb_format.setCurrentIndex(0)
            self.dlg.cb_region.setCurrentIndex(0)
            self.dlg.list_provinces.clearSelection()  # Cancella le selezioni dalla lista
            self.dlg.cb_region.setEnabled(True)
            self.dlg.le_url.setEnabled(True)
            self.dlg.le_url.clear()
            self.dlg.text_log.clear()
            self.dlg.setWindowTitle("Catasto IT GML Merger PRO")
            
            # Chiudi il dialog alla fine
            self.dlg.hide()

        def url_update():
            self.dlg.le_url.setText("https://wfs.cartografia.agenziaentrate.gov.it/inspire/wfs/GetDataset.php?dataset=" + self.dlg.cb_region.currentText() + ".zip")
            
        def aggiorna_campi_output():
            """Attiva o disattiva i campi di output in base al tipo di file selezionato"""
            file_type = self.dlg.cb_file_type.currentText()
            
            # Gestisci i widget per l'output MAP
            map_enabled = file_type in ["Mappe (MAP)", "Entrambi"]
            self.dlg.le_map_output.setEnabled(map_enabled)
            
            # Gestisci i widget per l'output PLE
            ple_enabled = file_type in ["Particelle (PLE)", "Entrambi"]
            self.dlg.le_ple_output.setEnabled(ple_enabled)
            self.dlg.cb_sez_censu.setVisible(ple_enabled)  # Mostra l'opzione sezione censuaria solo quando PLE è abilitato
            
            # Aggiorna placeholder text per indicare che è richiesto solo il nome del file
            self.dlg.le_map_output.setPlaceholderText("Solo nome file (es. mappe_catastali)")
            self.dlg.le_ple_output.setPlaceholderText("Solo nome file (es. particelle_catastali)")
        
        self.dlg.cb_region.currentIndexChanged.connect(url_update)
        self.dlg.cb_file_type.currentIndexChanged.connect(aggiorna_campi_output)                                                       
        self.dlg.btn_process.clicked.connect(process_gml_files)
        self.dlg.btn_close.clicked.connect(pulisci_temporanea)
        self.dlg.btn_stop.clicked.connect(self.stop_processing)  # Ora funzionerà correttamente
        self.dlg.btn_stop.setEnabled(False)  # Disabilitato all'avvio
        
        # Imposta lo stato iniziale dei campi di output
        aggiorna_campi_output()

    def stop_processing(self):
        """Interrompe il processo di elaborazione in corso"""
        if self.processing_active:
            self.processing_active = False
            # Utilizziamo la funzione log_message definita nel contesto di run()
            self.dlg.text_log.append("\n<span style='color:red;font-weight:bold;'>Interruzione richiesta dall'utente...</span>")
            self.dlg.text_log.append("L'elaborazione verrà interrotta appena possibile")
            self.dlg.btn_stop.setEnabled(False)
    
    def reset_processing_state(self):
        """Ripristina lo stato dell'interfaccia dopo l'elaborazione"""
        self.processing_active = False
        self.dlg.btn_stop.setEnabled(False)
        self.dlg.btn_process.setEnabled(True)

    # def update_progress(self, value):
        # """Aggiorna la barra di progresso"""
        # self.dlg.progressBar.setValue(value)
    
    def on_task_completed(self, success, result):
        """Gestisce il completamento del task"""
        global directory_temporanea
        
        if success:
            self.dlg.text_log.append("\nElaborazione completata con successo!")
            
            # Aggiorna le informazioni dei percorsi output
            if result.get('map_output') and result['map_count'] > 0:
                self.dlg.text_log.append(f"File MAP salvato in: {result['map_output']}")
            if result.get('ple_output') and result['ple_count'] > 0:
                self.dlg.text_log.append(f"File PLE salvato in: {result['ple_output']}")
            
            # Carica i layer se l'opzione è attiva
            if result.get('load_layers', False):
                self.dlg.text_log.append("\n<span style='color:#FF8C00;font-weight:bold;'>Caricamento layer in QGIS...</span>")
                
                # Carica il layer MAP se disponibile
                if result.get('map_output') and result['map_count'] > 0:
                    map_file = result['map_output']
                    file_name = os.path.basename(map_file)
                    base_name = os.path.splitext(file_name)[0]
                    
                    map_layer = QgsVectorLayer(map_file, base_name, "ogr")
                    if map_layer.isValid():
                        QgsProject.instance().addMapLayer(map_layer)
                        self.dlg.text_log.append(f"Layer MAP '{base_name}' caricato in QGIS")
                    else:
                        self.dlg.text_log.append(f"ERRORE: Impossibile caricare il layer MAP '{base_name}'")
                
                # Carica il layer PLE se disponibile
                if result.get('ple_output') and result['ple_count'] > 0:
                    ple_file = result['ple_output']
                    file_name = os.path.basename(ple_file)
                    base_name = os.path.splitext(file_name)[0]
                    
                    ple_layer = QgsVectorLayer(ple_file, base_name, "ogr")
                    if ple_layer.isValid():
                        QgsProject.instance().addMapLayer(ple_layer)
                        self.dlg.text_log.append(f"Layer PLE '{base_name}' caricato in QGIS")
                    else:
                        self.dlg.text_log.append(f"ERRORE: Impossibile caricare il layer PLE '{base_name}'")
                
                # self.dlg.text_log.append("<span style='color:#FF8C00;font-weight:bold;'>ATTENZIONE: I file temporanei saranno ELIMINATI dopo la conclusione del processo premendo 'Pulisci'!</span>")
            
            # Mostra i tempi di elaborazione
            if result.get('processing_times'):
                self.dlg.text_log.append("\nTempi di elaborazione:")
                for file_type, processing_time in result['processing_times'].items():
                    self.dlg.text_log.append(f"- {file_type}: {processing_time}")
            
            # Aggiorna la directory temporanea per la pulizia successiva
            if result.get('temp_dir'):
                directory_temporanea = result['temp_dir']
                self.dlg.text_log.append(f"\nDirectory temporanea: {directory_temporanea}")
                self.dlg.text_log.append("Usa il pulsante 'Pulisci' per eliminare i file temporanei")
        else:
            self.dlg.text_log.append("\n<span style='color:red;font-weight:bold;'>Elaborazione non completata</span>")
            if result.get('exception'):
                self.dlg.text_log.append(f"Errore: {str(result.get('exception'))}")
        
        # Aggiorna titolo finestra
        self.dlg.setWindowTitle("Catasto IT GML Merger PRO - Elaborazione completata")
        
        # Ripristina lo stato dell'interfaccia
        self.reset_processing_state()
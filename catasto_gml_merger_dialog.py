# -*- coding: utf-8 -*-
"""
/***************************************************************************
 catasto_gml_mergerDialog
                                 A QGIS plugin
 catasto_gml_merger
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-02-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Salvatore Fiandaca
        email                : Salvatore Fiandaca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'catasto_gml_merger_dialog_base.ui'))


class catasto_gml_mergerDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(catasto_gml_mergerDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # self.le_map_output.setFilter('*.gpgk')
        # self.le_ple_output.setFilter('*.gpgk')
        
        # def updateFileType():
            
            # self.le_map_output.setFilter('*.' + self.cb_format.currentText())
            # self.le_ple_output.setFilter('*.' + self.cb_format.currentText())
            
            # if self.le_map_output.filePath():
                # self.le_map_output.setFilePath(self.le_map_output.filePath().split('.')[0]+'.'+self.cb_format.currentText())
            
            # if self.le_ple_output.filePath():
                # self.le_ple_output.setFilePath(self.le_ple_output.filePath().split('.')[0]+'.'+self.cb_format.currentText())
                    
            # # print('update', self.cb_format.currentText())
        
        # self.cb_format.currentTextChanged.connect(updateFileType)
        
    def closeEvent(self, event):
        # dir_path = directory_temporanea

        # try:
            # shutil.rmtree(dir_path)
            # log_message(f"directory {dir_path} rimossa correttamente")
        # except OSError as e:
           # log_message("\nError: %s : %s" % (dir_path, e.strerror))

        self.le_folder.setFilePath("")
        self.le_map_output.setFilePath("")
        self.le_ple_output.setFilePath("")
        self.cb_file_type.setCurrentIndex(0)
        self.cb_format.setCurrentIndex(0)
        self.cb_region.setCurrentIndex(0)
        self.le_url.clear()
        self.text_log.clear()
        
        print("close!")